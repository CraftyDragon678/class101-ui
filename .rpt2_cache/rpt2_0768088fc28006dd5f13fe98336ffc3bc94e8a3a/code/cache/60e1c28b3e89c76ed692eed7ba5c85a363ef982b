{"code":"// @flow\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { white, orange600, gray700, gray500 } from '../Colors';\r\nimport { body2Gray } from '../TextStyles';\r\nconst Container = styled.div `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 16px;\n  background-color: ${props => props.backgroundColor || gray700};\n  height: 32px;\n`;\r\nconst Content = styled.div `\n  ${body2Gray};\n  display: flex;\n  align-items: center;\n  page-break-after: always;\n  break-after: always;\n  border-radius: 16px;\n  flex: 1;\n  justify-content: center;\n  height: 100%;\n  color: ${props => props.color || gray500};\n  ${props => props.active &&\r\n    css `\n      background-color: ${props => props.activeBackgroundColor || orange600};\n      color: ${props => props.activeColor || white};\n      font-weight: bold;\n    `};\n`;\r\nconst Chevron = styled.img.attrs({\r\n    src: 'https://s3.ap-northeast-2.amazonaws.com/class101-ui/images/ic-chevron-gray.png',\r\n    alt: '>',\r\n}) `\n  width: 24px;\n  height: 24px;\n  margin: 0 12px;\n`;\r\nexport default ({ value, items, color, backgroundColor, activeBackgroundColor, activeColor, ...restProps }) => (React.createElement(Container, Object.assign({ backgroundColor: backgroundColor }, restProps), items &&\r\n    items\r\n        .map((item, index) => (React.createElement(Content, { key: String(index), active: Boolean(value && String(value) === String(item.value)), color: color, activeBackgroundColor: activeBackgroundColor, activeColor: activeColor }, item.label || item.value)))\r\n        .reduce((prev, curr) => (React.createElement(React.Fragment, null,\r\n        prev,\r\n        React.createElement(Chevron, null),\r\n        curr)))));\r\n","dts":{"name":"/Users/baehyeonseung/pedaling/class101-ui/ProgressState/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\ninterface Props {\r\n    value?: string;\r\n    items?: {\r\n        label?: string;\r\n        value: string;\r\n    }[];\r\n    color?: string;\r\n    backgroundColor?: string;\r\n    activeColor?: string;\r\n    activeBackgroundColor?: string;\r\n}\r\ndeclare const _default: ({ value, items, color, backgroundColor, activeBackgroundColor, activeColor, ...restProps }: Props) => JSX.Element;\r\nexport default _default;\r\n"}}
