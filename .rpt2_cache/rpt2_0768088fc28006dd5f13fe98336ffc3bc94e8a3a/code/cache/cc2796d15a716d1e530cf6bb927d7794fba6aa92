{"code":"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport { body2Black } from '../TextStyles';\r\nconst Card = styled.div `\n  position: relative;\n  width: 100%;\n`;\r\nconst CoverImage = styled.div `\n  overflow: hidden;\n  border-radius: 2px;\n  ${props => {\r\n    const ratios = props.coverImageRatio.split('*');\r\n    return css `\n      position: relative;\n      padding-bottom: ${(Number(ratios[1]) / Number(ratios[0])) * 100}%;\n      img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n    `;\r\n}}\n`;\r\nconst Body = styled.div `\n  margin-top: 4px;\n  > div {\n    margin-top: 2px;\n  }\n`;\r\nconst Title = styled.div `\n  ${body2Black};\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\r\nconst anchorCardStyle = css `\n  img {\n    transition: transform 0.5s, opacity 0.5s;\n    opacity: 1;\n    transform: scale(1);\n  }\n  &:hover,\n  &:focus {\n    img {\n      opacity: 0.9;\n      transform: scale(1.1);\n    }\n  }\n`;\r\nconst LinkCardInner = styled(Link) `\n  ${anchorCardStyle};\n`;\r\nconst AnchorCardInner = styled.a `\n  ${anchorCardStyle};\n`;\r\nexport default ({ title, coverImage, coverImageSrcSet, coverImageAlt, coverImageRatio = '4*3', extraTop, extraBottom, children, to, href, target, ...restProps }) => {\r\n    const options = {};\r\n    if (target === '_blank') {\r\n        options.rel = 'noopener noreferrer';\r\n    }\r\n    const imgElements = () => {\r\n        if (typeof coverImage === 'string') {\r\n            return coverImageSrcSet ? (React.createElement(\"img\", { src: coverImage, alt: coverImageAlt || '', srcSet: coverImageSrcSet })) : (React.createElement(\"img\", { src: coverImage, alt: coverImageAlt || '' }));\r\n        }\r\n        return coverImage;\r\n    };\r\n    const innerElements = (React.createElement(React.Fragment, null,\r\n        React.createElement(CoverImage, { coverImageRatio: coverImageRatio }, imgElements()),\r\n        React.createElement(Body, null,\r\n            extraTop,\r\n            React.createElement(Title, null, title),\r\n            extraBottom)));\r\n    if (to) {\r\n        return (React.createElement(Card, null,\r\n            React.createElement(LinkCardInner, Object.assign({ to: to, target: target }, options), innerElements),\r\n            children));\r\n    }\r\n    if (href) {\r\n        return (React.createElement(Card, null,\r\n            React.createElement(AnchorCardInner, Object.assign({ href: href, target: target }, options), innerElements),\r\n            children));\r\n    }\r\n    return (React.createElement(Card, Object.assign({}, restProps),\r\n        innerElements,\r\n        children));\r\n};\r\n","dts":{"name":"/Users/baehyeonseung/pedaling/class101-ui/Card/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\ninterface Props {\r\n    title: string;\r\n    coverImage: string | JSX.Element;\r\n    coverImageSrcSet?: string;\r\n    coverImageAlt?: string;\r\n    coverImageRatio?: '1*1' | '4*3' | '16*9';\r\n    extraTop?: JSX.Element;\r\n    extraBottom?: JSX.Element;\r\n    to?: string;\r\n    href?: string;\r\n    children?: JSX.Element;\r\n    target?: string;\r\n}\r\ndeclare const _default: ({ title, coverImage, coverImageSrcSet, coverImageAlt, coverImageRatio, extraTop, extraBottom, children, to, href, target, ...restProps }: Props) => JSX.Element;\r\nexport default _default;\r\n"}}
