{"code":"// @flow\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { SIZES } from '../BreakPoints';\r\nimport { gray800 } from '../Colors';\r\nimport { body1, body2, caption1, caption2, display2, display3, headline1, headline2, headline3, subtitle1, tiny1, } from '../TextStyles';\r\nconst customStyle = css `\n  color: ${props => props.color || gray800};\n  margin-top: ${props => props.marginTop || 0}px;\n  margin-bottom: ${props => props.marginBottom || 0}px;\n  margin-left: ${props => props.marginLeft || 0}px;\n  margin-right: ${props => props.marginRight || 0}px;\n  ${props => props.textAlign && `text-align: ${props.textAlign}`};\n`;\r\nconst Headline1 = styled.h1 `\n  ${headline1};\n  ${props => props.display &&\r\n    [2, '2'].includes(props.display) &&\r\n    css `\n      ${display2};\n    `};\n  ${props => props.display &&\r\n    [3, '3'].includes(props.display) &&\r\n    css `\n      ${display3};\n    `};\n  ${customStyle};\n`;\r\nconst Headline2 = styled.h2 `\n  ${headline2};\n  color: ${props => props.color || gray800};\n  ${props => props.display &&\r\n    [2, '2'].includes(props.display) &&\r\n    css `\n      ${display2};\n    `};\n  ${props => props.display &&\r\n    [3, '3'].includes(props.display) &&\r\n    css `\n      ${display3};\n    `};\n  ${customStyle};\n`;\r\nconst Headline3 = styled.h3 `\n  ${headline3};\n  color: ${props => props.color || gray800};\n  ${props => props.display &&\r\n    [2, '2'].includes(props.display) &&\r\n    css `\n      ${display2};\n    `};\n  ${props => props.display &&\r\n    [3, '3'].includes(props.display) &&\r\n    css `\n      ${display3};\n    `};\n  ${customStyle};\n`;\r\nconst Subtitle1 = styled.h4 `\n  ${subtitle1};\n  ${customStyle};\n`;\r\nconst Body1 = styled.div `\n  ${body1};\n  line-height: 24px;\n  ${customStyle};\n`;\r\nconst Body1Paragraph = styled.p `\n  ${body1};\n  line-height: 28px;\n  ${customStyle};\n`;\r\nconst Body2 = styled.div `\n  ${body2};\n  line-height: 20px;\n  ${customStyle};\n`;\r\nconst Body2Paragraph = styled.div `\n  ${body2};\n  line-height: 24px;\n  ${customStyle};\n`;\r\nconst Caption1 = styled.div `\n  ${caption1};\n  ${customStyle};\n`;\r\nconst Caption2 = styled.div `\n  ${caption2};\n  ${customStyle};\n`;\r\nconst Tiny1 = styled.div `\n  ${tiny1};\n  ${customStyle};\n`;\r\nconst getCurrentSize = (currentWidth) => {\r\n    let windowSize = 'md';\r\n    if (!currentWidth) {\r\n        return windowSize;\r\n    }\r\n    Object.keys(SIZES).forEach(key => {\r\n        const size = SIZES[key];\r\n        const conditions = Object.keys(size).map(sizeOption => {\r\n            const BreakPoint = size[sizeOption];\r\n            if (BreakPoint && sizeOption === 'minWidth') {\r\n                return currentWidth >= BreakPoint;\r\n            }\r\n            if (BreakPoint && sizeOption === 'maxWidth') {\r\n                return currentWidth <= BreakPoint;\r\n            }\r\n            return 'SKIP';\r\n        });\r\n        if (!conditions.includes(false) && conditions.join() !== 'SKIP,SKIP') {\r\n            windowSize = key;\r\n        }\r\n        return windowSize;\r\n    });\r\n    return windowSize;\r\n};\r\nconst capitalize = (str) => (str ? str[0].toUpperCase() + str.slice(1) : null);\r\nconst throttle = (callback, limit) => {\r\n    let wait = false;\r\n    return () => {\r\n        if (!wait) {\r\n            callback.call();\r\n            wait = true;\r\n            setTimeout(() => {\r\n                wait = false;\r\n            }, limit);\r\n        }\r\n    };\r\n};\r\nconst TypographyList = {\r\n    Headline1,\r\n    Headline2,\r\n    Headline3,\r\n    Subtitle1,\r\n    Body1,\r\n    Body1Paragraph,\r\n    Body2,\r\n    Body2Paragraph,\r\n    Caption1,\r\n    Caption2,\r\n    Tiny1,\r\n};\r\nexport default class Typography extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            width: 0,\r\n        };\r\n        this.updateWindowDimensions = throttle(() => {\r\n            this.setState({ width: window.innerWidth });\r\n        }, 60);\r\n    }\r\n    componentDidMount() {\r\n        const { lg, md, sm } = this.props;\r\n        if ([lg, md, sm].filter(Boolean).length >= 2) {\r\n            this.updateWindowDimensions();\r\n            window.addEventListener('resize', this.updateWindowDimensions);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const { lg, md, sm } = this.props;\r\n        if ([lg, md, sm].filter(Boolean).length >= 2) {\r\n            window.removeEventListener('resize', this.updateWindowDimensions);\r\n        }\r\n    }\r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, ...restProps } = this.props;\r\n        const lg = capitalize(this.props.lg);\r\n        const md = capitalize(this.props.md);\r\n        const sm = capitalize(this.props.sm);\r\n        let Element = null;\r\n        if (!lg && md && !sm) {\r\n            Element = TypographyList[md];\r\n            return React.createElement(Element, Object.assign({}, restProps), children);\r\n        }\r\n        const currentSize = getCurrentSize(width);\r\n        if (lg && currentSize === 'lg') {\r\n            Element = TypographyList[lg || md];\r\n        }\r\n        else if (md && currentSize === 'md') {\r\n            Element = TypographyList[md];\r\n        }\r\n        else if (sm && currentSize === 'sm') {\r\n            Element = TypographyList[sm || md];\r\n        }\r\n        else {\r\n            Element = TypographyList[md || 'Body1'];\r\n        }\r\n        return React.createElement(Element, Object.assign({}, restProps), children);\r\n    }\r\n}\r\n","dts":{"name":"/Users/baehyeonseung/pedaling/class101-ui/Typography/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport declare type Typo = keyof typeof TypographyList;\r\ninterface Props {\r\n    lg?: Typo;\r\n    md: Typo;\r\n    sm?: Typo;\r\n    children?: JSX.Element | string;\r\n    display?: 1 | 2 | 3;\r\n}\r\ninterface State {\r\n    width: number;\r\n}\r\ninterface CommonTypoProps {\r\n    color?: string;\r\n    marginTop?: number;\r\n    marginBottom?: number;\r\n    marginRight?: number;\r\n    marginLeft?: number;\r\n    textAlign?: string;\r\n    display?: string | number;\r\n}\r\ndeclare const TypographyList: {\r\n    Headline1: import(\"styled-components\").StyledComponent<\"h1\", any, CommonTypoProps, never>;\r\n    Headline2: import(\"styled-components\").StyledComponent<\"h2\", any, CommonTypoProps, never>;\r\n    Headline3: import(\"styled-components\").StyledComponent<\"h3\", any, CommonTypoProps, never>;\r\n    Subtitle1: import(\"styled-components\").StyledComponent<\"h4\", any, CommonTypoProps, never>;\r\n    Body1: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n    Body1Paragraph: import(\"styled-components\").StyledComponent<\"p\", any, CommonTypoProps, never>;\r\n    Body2: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n    Body2Paragraph: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n    Caption1: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n    Caption2: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n    Tiny1: import(\"styled-components\").StyledComponent<\"div\", any, CommonTypoProps, never>;\r\n};\r\nexport default class Typography extends React.PureComponent<Props, State> {\r\n    readonly state: {\r\n        width: number;\r\n    };\r\n    updateWindowDimensions: () => void;\r\n    componentDidMount(): void;\r\n    componentWillUnmount(): void;\r\n    render(): JSX.Element;\r\n}\r\nexport {};\r\n"}}
