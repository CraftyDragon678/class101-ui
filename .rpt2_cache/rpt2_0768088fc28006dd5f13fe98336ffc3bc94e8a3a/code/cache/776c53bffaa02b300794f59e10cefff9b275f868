{"code":"import { css } from 'styled-components';\r\nexport function buildMediaQuery({ minWidth, maxWidth }, not) {\r\n    let query = '';\r\n    if (minWidth) {\r\n        query += `(min-width: ${minWidth}px)`;\r\n    }\r\n    if (minWidth && maxWidth) {\r\n        query += ' and ';\r\n    }\r\n    if (maxWidth) {\r\n        query += `(max-width: ${maxWidth}px)`;\r\n    }\r\n    if (not) {\r\n        query = `not all and ${query}`;\r\n    }\r\n    return query;\r\n}\r\nexport default buildMediaQuery;\r\nexport const SIZES = {\r\n    sm: { maxWidth: 1023 },\r\n    md: {},\r\n    lg: { minWidth: 1024 },\r\n};\r\nexport const media = {\r\n    sm(first, ...interpolations) {\r\n        const mediaQuery = buildMediaQuery(SIZES.sm);\r\n        return css `\n      @media ${mediaQuery} {\n        ${css(first, ...interpolations)};\n      }\n    `;\r\n    },\r\n    md(first, ...interpolations) {\r\n        const mediaQuery = buildMediaQuery(SIZES.sm);\r\n        return css `\n      @media ${mediaQuery} {\n        ${css(first, ...interpolations)};\n      }\n    `;\r\n    },\r\n    lg(first, ...interpolations) {\r\n        const mediaQuery = buildMediaQuery(SIZES.sm);\r\n        return css `\n      @media ${mediaQuery} {\n        ${css(first, ...interpolations)};\n      }\n    `;\r\n    },\r\n};\r\n","dts":{"name":"/Users/baehyeonseung/pedaling/class101-ui/BreakPoints/index.d.ts","writeByteOrderMark":false,"text":"import { InterpolationFunction, ThemedStyledProps, Interpolation, CSSObject } from 'styled-components';\r\nexport declare function buildMediaQuery({ minWidth, maxWidth }: {\r\n    minWidth?: number;\r\n    maxWidth?: number;\r\n}, not?: boolean): string;\r\nexport default buildMediaQuery;\r\nexport declare const SIZES: {\r\n    sm: {\r\n        maxWidth: number;\r\n    };\r\n    md: {};\r\n    lg: {\r\n        minWidth: number;\r\n    };\r\n};\r\nexport declare const media: {\r\n    sm<T extends object>(first: TemplateStringsArray | CSSObject | InterpolationFunction<ThemedStyledProps<T, {}>>, ...interpolations: Interpolation<ThemedStyledProps<T, {}>>[]): import(\"styled-components\").FlattenInterpolation<ThemedStyledProps<T, any>>;\r\n    md<T extends object>(first: TemplateStringsArray | CSSObject | InterpolationFunction<ThemedStyledProps<T, {}>>, ...interpolations: Interpolation<ThemedStyledProps<T, {}>>[]): import(\"styled-components\").FlattenInterpolation<ThemedStyledProps<T, any>>;\r\n    lg<T extends object>(first: TemplateStringsArray | CSSObject | InterpolationFunction<ThemedStyledProps<T, {}>>, ...interpolations: Interpolation<ThemedStyledProps<T, {}>>[]): import(\"styled-components\").FlattenInterpolation<ThemedStyledProps<T, any>>;\r\n};\r\n"}}
