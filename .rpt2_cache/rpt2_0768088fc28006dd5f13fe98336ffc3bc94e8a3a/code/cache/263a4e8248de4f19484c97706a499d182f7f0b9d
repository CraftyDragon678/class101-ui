{"code":"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport { orange600, white } from '../Colors';\r\nimport Spinner from '../Spinner';\r\nimport { body2WhiteBold } from '../TextStyles';\r\nconst StyledSpinner = styled(Spinner) `\n  ${props => props.buttonSize === 'lg' &&\r\n    css `\n      span,\n      span > svg {\n        width: 24px;\n        height: 24px;\n      }\n    `};\n\n  ${props => props.buttonSize === 'md' &&\r\n    css `\n      span,\n      span > svg {\n        width: 18px;\n        height: 18px;\n      }\n    `};\n\n  ${props => props.buttonSize === 'sm' &&\r\n    css `\n      span,\n      span > svg {\n        width: 18px;\n        height: 18px;\n      }\n    `};\n\n  ${props => props.buttonSize === 'xs' &&\r\n    css `\n      span,\n      span > svg {\n        width: 16px;\n        height: 16px;\n      }\n    `};\n`;\r\nconst LeftIcon = styled.img.attrs({ alt: '' }) ``;\r\nconst RightIcon = styled.img.attrs({ alt: '' }) ``;\r\nconst buttonStyle = css `\n  ${body2WhiteBold};\n  color: ${props => props.color || white};\n  background-color: ${props => props.backgroundColor || orange600};\n  outline: none;\n  border: none;\n  border-radius: ${props => props.borderRadius || 3}px;\n  width: ${props => (props.block ? '100%' : 'auto')};\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  text-align: ${props => props.textAlign || 'center'};\n  cursor: pointer;\n  line-height: 1 !important;\n  box-sizing: border-box;\n  font-weight: normal;\n  vertical-align: middle;\n\n  ${props => props.size === 'lg' &&\r\n    css `\n      font-weight: bold;\n      font-size: 16px;\n      padding: 0 20px;\n      height: 48px;\n\n      ${LeftIcon}, ${RightIcon} {\n        font-size: 0;\n        width: 24px;\n        height: 24px;\n      }\n\n      ${LeftIcon} {\n        margin-right: 4px;\n      }\n\n      ${RightIcon} {\n        margin-left: 4px;\n      }\n    `};\n\n  ${props => props.size === 'md' &&\r\n    css `\n      font-size: 14px;\n      padding: 0 16px;\n      height: 40px;\n\n      ${LeftIcon}, ${RightIcon} {\n        width: 18px;\n        height: 18px;\n      }\n\n      ${LeftIcon} {\n        margin-right: 4px;\n      }\n\n      ${RightIcon} {\n        margin-left: 4px;\n      }\n    `};\n\n  ${props => props.size === 'sm' &&\r\n    css `\n      font-size: 14px;\n      padding: 0 12px;\n      height: 32px;\n\n      ${LeftIcon}, ${RightIcon} {\n        width: 18px;\n        height: 18px;\n      }\n\n      ${LeftIcon} {\n        margin-right: 4px;\n      }\n\n      ${RightIcon} {\n        margin-left: 4px;\n      }\n    `};\n\n  ${props => props.size === 'xs' &&\r\n    css `\n      font-size: 11px;\n      padding: 0 10px;\n      height: 28px;\n\n      ${LeftIcon}, ${RightIcon} {\n        width: 16px;\n        height: 16px;\n      }\n\n      ${LeftIcon} {\n        margin-right: 2px;\n      }\n\n      ${RightIcon} {\n        margin-left: 2px;\n      }\n    `};\n\n  * {\n    vertical-align: middle;\n  }\n\n  &:hover {\n    opacity: 0.9;\n    text-decoration: none;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.8;\n  }\n`;\r\nconst Button = styled.button `\n  ${buttonStyle};\n`;\r\nconst AnchorButtonInner = styled.div `\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n`;\r\nconst anchorButtonStyle = css `\n  ${buttonStyle};\n  text-decoration: none;\n  &:hover {\n    color: ${props => props.color || white};\n  }\n`;\r\nconst LinkButton = styled(Link) `\n  ${anchorButtonStyle};\n`;\r\nconst AnchorButton = styled.a `\n  ${anchorButtonStyle};\n`;\r\nexport default ({ size = 'md', type = 'button', leftIconSrc, rightIconSrc, children, disabled, loading, to, href, target, ...restProps }) => {\r\n    if (loading) {\r\n        return (React.createElement(Button, Object.assign({ type: type, size: size }, restProps, { disabled: true }),\r\n            React.createElement(StyledSpinner, { buttonSize: size })));\r\n    }\r\n    const options = {};\r\n    if (target === '_blank') {\r\n        options.rel = 'noopener noreferrer';\r\n    }\r\n    const innerElements = (React.createElement(React.Fragment, null,\r\n        Boolean(leftIconSrc) && React.createElement(LeftIcon, { src: leftIconSrc }),\r\n        React.createElement(\"span\", null, children),\r\n        Boolean(rightIconSrc) && React.createElement(RightIcon, { src: rightIconSrc })));\r\n    const anchorButtonElements = React.createElement(AnchorButtonInner, null, innerElements);\r\n    if (to) {\r\n        return (React.createElement(LinkButton, Object.assign({ to: to, target: target, size: size, disabled: disabled }, options, restProps), anchorButtonElements));\r\n    }\r\n    if (href) {\r\n        return (React.createElement(AnchorButton, Object.assign({ href: href, target: target, size: size, disabled: disabled }, options, restProps), anchorButtonElements));\r\n    }\r\n    return (React.createElement(Button, Object.assign({ type: type, size: size, disabled: disabled }, restProps), innerElements));\r\n};\r\n","dts":{"name":"/Users/baehyeonseung/pedaling/class101-ui/Button/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\ninterface Props {\r\n    type?: string;\r\n    block?: boolean;\r\n    size?: 'lg' | 'md' | 'sm' | 'xs';\r\n    color?: string;\r\n    backgroundColor?: string;\r\n    leftIconSrc?: string;\r\n    rightIconSrc?: string;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    loading?: boolean;\r\n    borderRadius?: number;\r\n    to?: string;\r\n    href?: string;\r\n    onClick?: (event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLAnchorElement>) => void;\r\n    children?: any;\r\n    disabled?: boolean;\r\n    target?: string;\r\n    style?: React.CSSProperties;\r\n}\r\ndeclare const _default: ({ size, type, leftIconSrc, rightIconSrc, children, disabled, loading, to, href, target, ...restProps }: Props) => JSX.Element;\r\nexport default _default;\r\n"}}
